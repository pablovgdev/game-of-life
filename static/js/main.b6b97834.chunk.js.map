{"version":3,"sources":["styles/Button.module.css","styles/Cell.module.css","styles/App.module.css","styles/Grid.module.css","components/GameContext.tsx","components/CellItem.tsx","components/Grid.tsx","components/Run.tsx","components/Stop.tsx","components/App.tsx","index.tsx"],"names":["module","exports","GameContext","React","createContext","CellItem","alive","row","col","useContext","cells","setCells","run","className","styles","dead","onClick","newCells","console","log","generateCells","calculateCells","window","innerHeight","push","innerWidth","screenSize","cellsPixelSize","Grid","setRun","useEffect","handleResize","addEventListener","removeEventListener","getSurroundingCells","cell","surroundingCells","length","interval","setInterval","cellsString","JSON","stringify","parse","calculate","clearInterval","grid","style","gridTemplateColumns","map","rowIndex","colIndex","key","Run","Stop","stop","App","useState","context","app","Provider","value","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b6b97834.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"run\":\"Button_run__3XPBX\",\"stop\":\"Button_stop__3lEiv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"Cell_cell__3It8G\",\"alive\":\"Cell_alive__3_X2v Cell_cell__3It8G\",\"dead\":\"Cell_dead__3dg0C Cell_cell__3It8G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__101rE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"Grid_grid__UzfeF\"};","import React from \"react\";\nimport { Cell } from \"./Grid\";\n\nexport interface IGameContext {\n  cells: Cell[][];\n  setCells: React.Dispatch<React.SetStateAction<Cell[][]>>;\n  run: boolean;\n  setRun: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst GameContext = React.createContext({} as IGameContext);\n\nexport default GameContext;\n","import React, { useContext } from \"react\";\nimport styles from \"../styles/Cell.module.css\";\nimport GameContext from \"./GameContext\";\n\ninterface CellProps {\n  alive: boolean;\n  row: number;\n  col: number;\n}\n\nconst CellItem: React.FC<CellProps> = ({ alive, row, col }) => {\n  const { cells, setCells, run } = useContext(GameContext);\n\n  const onClick = () => () => {\n    if (!run) {\n      const newCells = [...cells];\n      console.log(row, col);\n      newCells[row][col].alive = !cells[row][col].alive;\n      setCells(newCells);\n    }\n  }\n\n  return (\n    <div\n      className={alive ? styles.alive : styles.dead}\n      onClick={onClick()}\n    ></div>\n  )\n}\n\nexport default CellItem;","import React, { useContext, useEffect } from \"react\";\nimport styles from \"../styles/Grid.module.css\";\nimport CellItem from \"./CellItem\";\nimport GameContext from \"./GameContext\";\n\nexport interface Cell {\n  alive: boolean;\n  row: number;\n  col: number;\n}\n\nexport const generateCells = (): Cell[][] => {\n  const cells: Cell[][] = [];\n\n  for (let row = 0; row < calculateCells(window.innerHeight); row++) {\n    cells.push([]);\n\n    for (let col = 0; col < calculateCells(window.innerWidth); col++) {\n      cells[row].push({ alive: false, row, col });\n    }\n  }\n\n  return cells;\n}\n\nexport const calculateCells = (screenSize: number) => {\n  const gridCellSize = 21; // Cell size + Cell gap\n  let cells = 0;\n  let cellsPixelSize = 0;\n\n  while (cellsPixelSize + gridCellSize <= screenSize) {\n    cellsPixelSize += gridCellSize;\n    cells++;\n  }\n\n  return cells;\n}\n\nconst Grid: React.FC = () => {\n  const { cells, setCells, run, setRun } = useContext(GameContext);\n\n  useEffect(() => {\n    const handleResize = () => {\n      console.log('resized to: ', window.innerWidth, 'x', window.innerHeight)\n      setCells(generateCells());\n    }\n\n    window.addEventListener('resize', handleResize)\n    return () => window.removeEventListener(\"resize\", handleResize);\n  })\n\n  useEffect(() => {\n    const getSurroundingCells = (cell: Cell): number => {\n      let surroundingCells = 0;\n\n      for (let row = cell.row - 1; row <= cell.row + 1; row++) {\n        for (let col = cell.col - 1; col <= cell.col + 1; col++) {\n          if (row >= 0 && row < cells.length && col >= 0 && col < cells[0].length) {\n            if (cells[row][col].alive) {\n              if (row === cell.row && col === cell.col) {\n                continue;\n              } else {\n                surroundingCells++;\n              }\n            }\n          }\n        }\n      }\n\n      return surroundingCells;\n    }\n\n    const calculate = () => {\n      const cellsString = JSON.stringify(cells);\n      const newCells = JSON.parse(cellsString);\n\n      for (let row = 0; row < cells.length; row++) {\n        for (let col = 0; col < cells[0].length; col++) {\n          const surroundingCells = getSurroundingCells(cells[row][col]);\n\n          if (\n            cells[row][col].alive && (\n              surroundingCells < 2 ||\n              surroundingCells > 3\n            )\n          ) {\n            newCells[row][col].alive = false;\n          } else if (\n            !cells[row][col].alive &&\n            surroundingCells === 3\n          ) {\n            newCells[row][col].alive = true;\n          }\n        }\n      }\n\n      if (cellsString === JSON.stringify(newCells)) {\n        setRun(false);\n      } else {\n        setCells(newCells);\n      }\n    }\n\n    if (run) {\n      const interval = setInterval(() => calculate(), 50);\n      return () => clearInterval(interval);\n    }\n  }, [run, cells, setCells, setRun]);\n\n  return (\n    <div\n      className={styles.grid}\n      style={{ gridTemplateColumns: `repeat(${cells[0].length}, 1fr)` }}\n    >\n      {\n        cells.map((row, rowIndex) => {\n          return row.map((cell, colIndex) => {\n            return (\n              <CellItem\n                key={rowIndex + \"-\" + colIndex}\n                alive={cell.alive}\n                row={rowIndex}\n                col={colIndex}\n              />\n            )\n          })\n        })\n      }\n    </div>\n  )\n}\n\nexport default Grid;","import React, { useContext } from \"react\";\nimport GameContext from \"./GameContext\";\nimport styles from \"../styles/Button.module.css\";\n\nconst Run: React.FC = () => {\n  const { run, setRun } = useContext(GameContext);\n\n  const onClick = () => () => {\n    setRun(!run);\n  }\n\n  return <span className={styles.run} onClick={onClick()}>{run ? \"⏸\" : \"▶️\"}</span>\n}\n\nexport default Run;","import React, { useContext } from \"react\";\nimport styles from \"../styles/Button.module.css\";\nimport GameContext from \"./GameContext\";\nimport { generateCells } from \"./Grid\";\n\nconst Stop: React.FC = () => {\n  const { setRun, setCells } = useContext(GameContext);\n\n  const onClick = () => () => {\n    setRun(false);\n    setCells(generateCells());\n  }\n\n  return <span className={styles.stop} onClick={onClick()}>⏹</span>\n}\n\nexport default Stop;","import React, { useState } from 'react';\nimport styles from \"../styles/App.module.css\";\nimport GameContext from './GameContext';\nimport Grid, { generateCells } from './Grid';\nimport Run from './Run';\nimport Stop from './Stop';\n\nconst App: React.FC = () => {\n  const [cells, setCells] = useState(generateCells());\n  const [run, setRun] = useState(false);\n  const context = { cells, setCells, run, setRun };\n\n  return (\n    <div className={styles.app}>\n      <GameContext.Provider value={context}>\n        <Run />\n        <Stop />\n        <Grid />\n      </GameContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}